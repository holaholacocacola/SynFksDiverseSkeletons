using System;
using System.Collections.Generic;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.IO;

namespace SynFksDiverseSkeleton
{
    public class Program
    {
        const string MW_FILE = "morrowind_heights.json";
        const string SKELETONS_FILE = "skeletons.json";
        
        static Lazy<Settings> LazySettings = new Lazy<Settings>();
        static Settings Settings => LazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                 .SetAutogeneratedSettings(
                     "Settings",
                     "settings.json",
                     out LazySettings)
                 .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                 .SetTypicalOpen(GameRelease.SkyrimSE, "SynFksDiverseSkeleton.esp")
                 .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            /*
             * Load heights and skeleton paths. Then loop through available races and overwrite.
             */
            string morrowwindFile = Path.Combine(state.ExtraSettingsDataPath, MW_FILE);
            string skeletonFile = Path.Combine(state.ExtraSettingsDataPath, SKELETONS_FILE);
            if (!File.Exists(morrowwindFile) || !File.Exists(skeletonFile))
                throw new FileNotFoundException($"Config file(s) does not exist!: {morrowwindFile} or {skeletonFile}");

            string preset;
            if (Settings.Preset == HeightPreset.Morrowind)
            {
                preset = morrowwindFile;
            }
            else // we only have one supported preset for now.
            {
                throw new Exception("Preset error");
            }

            // Dont forget to switch this to jsonserializer before merge
            var heights = JObject.Parse(File.ReadAllText(preset));
            var skeletons = JObject.Parse(File.ReadAllText(skeletonFile));
            if (heights is null) throw new Exception($"Failed to parse {preset}");
            if (skeletons is null) throw new Exception($"Failed to parse {skeletons}");

            Dictionary<String, Races.HeightData>? heightData = heights.ToObject<Dictionary<String, Races.HeightData>>();
            Dictionary<String, Races.SkeletonData>? skeletonData = skeletons.ToObject<Dictionary<String, Races.SkeletonData>>();
            if (heightData is null || skeletonData is null)
            {
                throw new Exception("Failed to convert data"); // Very generic clean up 2nd pass.
            }

            foreach (var race in Races.AllowableRaces.formLinks)
            {
                if (!state.LinkCache.TryResolve<IRaceGetter>(race.FormKey, out var record) || record == null || record.EditorID is null)
                {
                    Console.Out.WriteLine($"Race {race} cannot be resolved");
                    continue;
                }

                if(!heightData.ContainsKey(record.EditorID) || !skeletonData.ContainsKey(record.EditorID))
                {
                    Console.Out.WriteLine($"No config data defined for {record.EditorID}");
                    continue;
                }

                var newRace = record.DeepCopy();
                newRace.Height.Male = heightData[record.EditorID].MaleHeight;
                newRace.Height.Female = heightData[record.EditorID].FemaleHeight;
                if (newRace.SkeletalModel != null)
                {
                    if (newRace.SkeletalModel.Male != null) newRace.SkeletalModel.Male.File = skeletonData[record.EditorID].MalePath;
                    if (newRace.SkeletalModel.Female != null) newRace.SkeletalModel.Female.File = skeletonData[record.EditorID].FemalePath;
                }
                
                state.PatchMod.Races.Set(newRace);
            }
        }

        /// <summary>
        /// Dumps skeleton and height data to a file. Useful for making presets of different skeleton mods
        /// </summary>
        /// <param name="state"></param>
        /// <param name="heightOut"></param>
        /// <param name="skeletonOut"></param>
        /*static void DumpData(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, string heightOut, string skeletonOut)
        {
            Dictionary<String, Races.HeightData> heightData = new Dictionary<string, Races.HeightData>();
            Dictionary<String, Races.SkeletonData> skeletonData = new Dictionary<string, Races.SkeletonData>();

            foreach (var race in Races.AllowableRaces.formLinks)
            {
                if (!state.LinkCache.TryResolve<IRaceGetter>(race.FormKey, out var dumpRecord) || dumpRecord == null || dumpRecord.EditorID is null)
                {
                    Console.Out.WriteLine($"Race {race} cannot be resolved");
                    continue;
                }

                float maleHeight = dumpRecord.Height.Male;
                float femaleHeight = dumpRecord.Height.Female;
                string maleSkeleton = ""; // dump.SkeletalModel?.Male?.File;
                string femaleSkeleton = ""; // dump.SkeletalModel?.Female?.File;
                if (dumpRecord.SkeletalModel != null)
                {
                    if (dumpRecord.SkeletalModel.Male != null) maleSkeleton = dumpRecord.SkeletalModel.Male.File;
                    if (dumpRecord.SkeletalModel.Female != null) femaleSkeleton = dumpRecord.SkeletalModel.Female.File;

                }
                heightData[dumpRecord.EditorID] = new Races.HeightData(maleHeight, femaleHeight);
                skeletonData[dumpRecord.EditorID] = new Races.SkeletonData(maleSkeleton, femaleSkeleton);
                
            }

            try
            {
                File.WriteAllText(heightOut, JsonConvert.SerializeObject(heightData, Formatting.Indented));
                File.WriteAllText(skeletonOut, JsonConvert.SerializeObject(skeletonData, Formatting.Indented));
            } 
            catch (Exception e)
            {
                Console.WriteLine($"Could not dump race data: {e}");
            }


        }*/


    }
}
